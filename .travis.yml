# This .travis.yml is modified from the sample at
# https://docs.haskellstack.org/en/stable/GUIDE/#travis-with-caching

# Use new container infrastructure to enable caching
sudo: false

# Do not choose a language; we provide our own build tools.
language: generic

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack

# The different configurations we want to test. We have BUILD=cabal which uses
# cabal-install, and BUILD=stack which uses Stack. More documentation on each
# of those below.
#
# We set the compiler values here to tell Travis to use a different
# cache file per set of arguments.
#
# If you need to have different apt packages for each combination in the
# matrix, you can use a line such as:
#     addons: {apt: {packages: [libfcgi-dev,libgmp-dev]}}
matrix:
  include:
  # We grab the appropriate GHC and cabal-install versions from hvr's PPA. See:
  # https://github.com/hvr/multi-ghc-travis
  - env: BUILD=cabal GHCVER=8.0.2 CABALVER=1.24
    compiler: ": #GHC 8.0.2"
    addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.2], sources: [hvr-ghc]}}
  - env: BUILD=cabal GHCVER=8.4.3 CABALVER=2.2
    compiler: ": #GHC 8.4.3"
    addons: {apt: {packages: [cabal-install-2.2,ghc-8.4.3], sources: [hvr-ghc]}}

  # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
  # variable, such as using --stack-yaml to point to a different file.
  - env: BUILD=stack
    compiler: ": #stack 8.4.3"
    addons: {apt: {packages: [ghc-8.4.3], sources: [hvr-ghc]}}

  # Nightly builds are allowed to fail
  # - env: BUILD=stack ARGS="--resolver nightly"
  #   compiler: ": #stack nightly"
  #   addons: {apt: {packages: [libgmp-dev]}}

  # - env: BUILD=stack ARGS="--resolver lts-8"
  # compiler: ": #stack 8.0.1 osx"
  # os: osx

  # - env: BUILD=stack ARGS="--resolver nightly"
  #   compiler: ": #stack nightly osx"
  #   os: osx

  allow_failures:
  - env: BUILD=cabal GHCVER=head  CABALVER=head

  fast_finish: true

before_install:
# Using compiler above sets CC to an invalid value, so unset it
- unset CC

# We want to always allow newer versions of packages when building on GHC HEAD
- CABALARGS=""
- if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi

# Download and unpack the stack executable
- export PATH=$PATH:/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin
- mkdir -p ~/.local/bin
- |
  if [ `uname` = "Darwin" ]
  then
    curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
  else
    curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
  fi

install:
- echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
- if [ -f configure.ac ]; then autoreconf -i; fi
- |
  case "$BUILD" in
    stack)
      ulimit -n 4096
      stack --no-terminal --install-ghc install --only-dependencies
      ;;
    cabal)
      cabal --version
      travis_retry cabal update
      cabal install -j alex happy
      cabal install -j --only-dependencies -ffast --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS
      ;;
  esac

script:
- |
  case "$BUILD" in
    stack)
      ulimit -n 4096
      stack --no-terminal install
      ;;
    cabal)
      cabal configure -fplugins -v2 -ffast --ghc-options="-O0 -Wall -fno-warn-unused-do-bind -Werror"
      cabal build -j
      cabal check
      cabal copy
      cabal sdist
      SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz && \
        (cd dist && cabal install -j --force-reinstalls "$SRC_TGZ")
      ;;
  esac
